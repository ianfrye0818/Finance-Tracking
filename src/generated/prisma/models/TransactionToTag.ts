
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TransactionToTag` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model TransactionToTag
 * 
 */
export type TransactionToTagModel = runtime.Types.Result.DefaultSelection<Prisma.$TransactionToTagPayload>

export type AggregateTransactionToTag = {
  _count: TransactionToTagCountAggregateOutputType | null
  _min: TransactionToTagMinAggregateOutputType | null
  _max: TransactionToTagMaxAggregateOutputType | null
}

export type TransactionToTagMinAggregateOutputType = {
  transactionId: string | null
  tagId: string | null
}

export type TransactionToTagMaxAggregateOutputType = {
  transactionId: string | null
  tagId: string | null
}

export type TransactionToTagCountAggregateOutputType = {
  transactionId: number
  tagId: number
  _all: number
}


export type TransactionToTagMinAggregateInputType = {
  transactionId?: true
  tagId?: true
}

export type TransactionToTagMaxAggregateInputType = {
  transactionId?: true
  tagId?: true
}

export type TransactionToTagCountAggregateInputType = {
  transactionId?: true
  tagId?: true
  _all?: true
}

export type TransactionToTagAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TransactionToTag to aggregate.
   */
  where?: Prisma.TransactionToTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransactionToTags to fetch.
   */
  orderBy?: Prisma.TransactionToTagOrderByWithRelationInput | Prisma.TransactionToTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TransactionToTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransactionToTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransactionToTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TransactionToTags
  **/
  _count?: true | TransactionToTagCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TransactionToTagMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TransactionToTagMaxAggregateInputType
}

export type GetTransactionToTagAggregateType<T extends TransactionToTagAggregateArgs> = {
      [P in keyof T & keyof AggregateTransactionToTag]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTransactionToTag[P]>
    : Prisma.GetScalarType<T[P], AggregateTransactionToTag[P]>
}




export type TransactionToTagGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TransactionToTagWhereInput
  orderBy?: Prisma.TransactionToTagOrderByWithAggregationInput | Prisma.TransactionToTagOrderByWithAggregationInput[]
  by: Prisma.TransactionToTagScalarFieldEnum[] | Prisma.TransactionToTagScalarFieldEnum
  having?: Prisma.TransactionToTagScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TransactionToTagCountAggregateInputType | true
  _min?: TransactionToTagMinAggregateInputType
  _max?: TransactionToTagMaxAggregateInputType
}

export type TransactionToTagGroupByOutputType = {
  transactionId: string
  tagId: string
  _count: TransactionToTagCountAggregateOutputType | null
  _min: TransactionToTagMinAggregateOutputType | null
  _max: TransactionToTagMaxAggregateOutputType | null
}

type GetTransactionToTagGroupByPayload<T extends TransactionToTagGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TransactionToTagGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TransactionToTagGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TransactionToTagGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TransactionToTagGroupByOutputType[P]>
      }
    >
  > 



export type TransactionToTagWhereInput = {
  AND?: Prisma.TransactionToTagWhereInput | Prisma.TransactionToTagWhereInput[]
  OR?: Prisma.TransactionToTagWhereInput[]
  NOT?: Prisma.TransactionToTagWhereInput | Prisma.TransactionToTagWhereInput[]
  transactionId?: Prisma.StringFilter<"TransactionToTag"> | string
  tagId?: Prisma.StringFilter<"TransactionToTag"> | string
  transaction?: Prisma.XOR<Prisma.TransactionScalarRelationFilter, Prisma.TransactionWhereInput>
  tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>
}

export type TransactionToTagOrderByWithRelationInput = {
  transactionId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  transaction?: Prisma.TransactionOrderByWithRelationInput
  tag?: Prisma.TagOrderByWithRelationInput
}

export type TransactionToTagWhereUniqueInput = Prisma.AtLeast<{
  transactionId_tagId?: Prisma.TransactionToTagTransactionIdTagIdCompoundUniqueInput
  AND?: Prisma.TransactionToTagWhereInput | Prisma.TransactionToTagWhereInput[]
  OR?: Prisma.TransactionToTagWhereInput[]
  NOT?: Prisma.TransactionToTagWhereInput | Prisma.TransactionToTagWhereInput[]
  transactionId?: Prisma.StringFilter<"TransactionToTag"> | string
  tagId?: Prisma.StringFilter<"TransactionToTag"> | string
  transaction?: Prisma.XOR<Prisma.TransactionScalarRelationFilter, Prisma.TransactionWhereInput>
  tag?: Prisma.XOR<Prisma.TagScalarRelationFilter, Prisma.TagWhereInput>
}, "transactionId_tagId">

export type TransactionToTagOrderByWithAggregationInput = {
  transactionId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
  _count?: Prisma.TransactionToTagCountOrderByAggregateInput
  _max?: Prisma.TransactionToTagMaxOrderByAggregateInput
  _min?: Prisma.TransactionToTagMinOrderByAggregateInput
}

export type TransactionToTagScalarWhereWithAggregatesInput = {
  AND?: Prisma.TransactionToTagScalarWhereWithAggregatesInput | Prisma.TransactionToTagScalarWhereWithAggregatesInput[]
  OR?: Prisma.TransactionToTagScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TransactionToTagScalarWhereWithAggregatesInput | Prisma.TransactionToTagScalarWhereWithAggregatesInput[]
  transactionId?: Prisma.StringWithAggregatesFilter<"TransactionToTag"> | string
  tagId?: Prisma.StringWithAggregatesFilter<"TransactionToTag"> | string
}

export type TransactionToTagCreateInput = {
  transaction: Prisma.TransactionCreateNestedOneWithoutTagsInput
  tag: Prisma.TagCreateNestedOneWithoutTransactionsInput
}

export type TransactionToTagUncheckedCreateInput = {
  transactionId: string
  tagId: string
}

export type TransactionToTagUpdateInput = {
  transaction?: Prisma.TransactionUpdateOneRequiredWithoutTagsNestedInput
  tag?: Prisma.TagUpdateOneRequiredWithoutTransactionsNestedInput
}

export type TransactionToTagUncheckedUpdateInput = {
  transactionId?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TransactionToTagCreateManyInput = {
  transactionId: string
  tagId: string
}

export type TransactionToTagUpdateManyMutationInput = {

}

export type TransactionToTagUncheckedUpdateManyInput = {
  transactionId?: Prisma.StringFieldUpdateOperationsInput | string
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TransactionToTagListRelationFilter = {
  every?: Prisma.TransactionToTagWhereInput
  some?: Prisma.TransactionToTagWhereInput
  none?: Prisma.TransactionToTagWhereInput
}

export type TransactionToTagOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TransactionToTagTransactionIdTagIdCompoundUniqueInput = {
  transactionId: string
  tagId: string
}

export type TransactionToTagCountOrderByAggregateInput = {
  transactionId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
}

export type TransactionToTagMaxOrderByAggregateInput = {
  transactionId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
}

export type TransactionToTagMinOrderByAggregateInput = {
  transactionId?: Prisma.SortOrder
  tagId?: Prisma.SortOrder
}

export type TransactionToTagCreateNestedManyWithoutTagInput = {
  create?: Prisma.XOR<Prisma.TransactionToTagCreateWithoutTagInput, Prisma.TransactionToTagUncheckedCreateWithoutTagInput> | Prisma.TransactionToTagCreateWithoutTagInput[] | Prisma.TransactionToTagUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.TransactionToTagCreateOrConnectWithoutTagInput | Prisma.TransactionToTagCreateOrConnectWithoutTagInput[]
  createMany?: Prisma.TransactionToTagCreateManyTagInputEnvelope
  connect?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
}

export type TransactionToTagUncheckedCreateNestedManyWithoutTagInput = {
  create?: Prisma.XOR<Prisma.TransactionToTagCreateWithoutTagInput, Prisma.TransactionToTagUncheckedCreateWithoutTagInput> | Prisma.TransactionToTagCreateWithoutTagInput[] | Prisma.TransactionToTagUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.TransactionToTagCreateOrConnectWithoutTagInput | Prisma.TransactionToTagCreateOrConnectWithoutTagInput[]
  createMany?: Prisma.TransactionToTagCreateManyTagInputEnvelope
  connect?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
}

export type TransactionToTagUpdateManyWithoutTagNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionToTagCreateWithoutTagInput, Prisma.TransactionToTagUncheckedCreateWithoutTagInput> | Prisma.TransactionToTagCreateWithoutTagInput[] | Prisma.TransactionToTagUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.TransactionToTagCreateOrConnectWithoutTagInput | Prisma.TransactionToTagCreateOrConnectWithoutTagInput[]
  upsert?: Prisma.TransactionToTagUpsertWithWhereUniqueWithoutTagInput | Prisma.TransactionToTagUpsertWithWhereUniqueWithoutTagInput[]
  createMany?: Prisma.TransactionToTagCreateManyTagInputEnvelope
  set?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  disconnect?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  delete?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  connect?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  update?: Prisma.TransactionToTagUpdateWithWhereUniqueWithoutTagInput | Prisma.TransactionToTagUpdateWithWhereUniqueWithoutTagInput[]
  updateMany?: Prisma.TransactionToTagUpdateManyWithWhereWithoutTagInput | Prisma.TransactionToTagUpdateManyWithWhereWithoutTagInput[]
  deleteMany?: Prisma.TransactionToTagScalarWhereInput | Prisma.TransactionToTagScalarWhereInput[]
}

export type TransactionToTagUncheckedUpdateManyWithoutTagNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionToTagCreateWithoutTagInput, Prisma.TransactionToTagUncheckedCreateWithoutTagInput> | Prisma.TransactionToTagCreateWithoutTagInput[] | Prisma.TransactionToTagUncheckedCreateWithoutTagInput[]
  connectOrCreate?: Prisma.TransactionToTagCreateOrConnectWithoutTagInput | Prisma.TransactionToTagCreateOrConnectWithoutTagInput[]
  upsert?: Prisma.TransactionToTagUpsertWithWhereUniqueWithoutTagInput | Prisma.TransactionToTagUpsertWithWhereUniqueWithoutTagInput[]
  createMany?: Prisma.TransactionToTagCreateManyTagInputEnvelope
  set?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  disconnect?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  delete?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  connect?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  update?: Prisma.TransactionToTagUpdateWithWhereUniqueWithoutTagInput | Prisma.TransactionToTagUpdateWithWhereUniqueWithoutTagInput[]
  updateMany?: Prisma.TransactionToTagUpdateManyWithWhereWithoutTagInput | Prisma.TransactionToTagUpdateManyWithWhereWithoutTagInput[]
  deleteMany?: Prisma.TransactionToTagScalarWhereInput | Prisma.TransactionToTagScalarWhereInput[]
}

export type TransactionToTagCreateNestedManyWithoutTransactionInput = {
  create?: Prisma.XOR<Prisma.TransactionToTagCreateWithoutTransactionInput, Prisma.TransactionToTagUncheckedCreateWithoutTransactionInput> | Prisma.TransactionToTagCreateWithoutTransactionInput[] | Prisma.TransactionToTagUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.TransactionToTagCreateOrConnectWithoutTransactionInput | Prisma.TransactionToTagCreateOrConnectWithoutTransactionInput[]
  createMany?: Prisma.TransactionToTagCreateManyTransactionInputEnvelope
  connect?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
}

export type TransactionToTagUncheckedCreateNestedManyWithoutTransactionInput = {
  create?: Prisma.XOR<Prisma.TransactionToTagCreateWithoutTransactionInput, Prisma.TransactionToTagUncheckedCreateWithoutTransactionInput> | Prisma.TransactionToTagCreateWithoutTransactionInput[] | Prisma.TransactionToTagUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.TransactionToTagCreateOrConnectWithoutTransactionInput | Prisma.TransactionToTagCreateOrConnectWithoutTransactionInput[]
  createMany?: Prisma.TransactionToTagCreateManyTransactionInputEnvelope
  connect?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
}

export type TransactionToTagUpdateManyWithoutTransactionNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionToTagCreateWithoutTransactionInput, Prisma.TransactionToTagUncheckedCreateWithoutTransactionInput> | Prisma.TransactionToTagCreateWithoutTransactionInput[] | Prisma.TransactionToTagUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.TransactionToTagCreateOrConnectWithoutTransactionInput | Prisma.TransactionToTagCreateOrConnectWithoutTransactionInput[]
  upsert?: Prisma.TransactionToTagUpsertWithWhereUniqueWithoutTransactionInput | Prisma.TransactionToTagUpsertWithWhereUniqueWithoutTransactionInput[]
  createMany?: Prisma.TransactionToTagCreateManyTransactionInputEnvelope
  set?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  disconnect?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  delete?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  connect?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  update?: Prisma.TransactionToTagUpdateWithWhereUniqueWithoutTransactionInput | Prisma.TransactionToTagUpdateWithWhereUniqueWithoutTransactionInput[]
  updateMany?: Prisma.TransactionToTagUpdateManyWithWhereWithoutTransactionInput | Prisma.TransactionToTagUpdateManyWithWhereWithoutTransactionInput[]
  deleteMany?: Prisma.TransactionToTagScalarWhereInput | Prisma.TransactionToTagScalarWhereInput[]
}

export type TransactionToTagUncheckedUpdateManyWithoutTransactionNestedInput = {
  create?: Prisma.XOR<Prisma.TransactionToTagCreateWithoutTransactionInput, Prisma.TransactionToTagUncheckedCreateWithoutTransactionInput> | Prisma.TransactionToTagCreateWithoutTransactionInput[] | Prisma.TransactionToTagUncheckedCreateWithoutTransactionInput[]
  connectOrCreate?: Prisma.TransactionToTagCreateOrConnectWithoutTransactionInput | Prisma.TransactionToTagCreateOrConnectWithoutTransactionInput[]
  upsert?: Prisma.TransactionToTagUpsertWithWhereUniqueWithoutTransactionInput | Prisma.TransactionToTagUpsertWithWhereUniqueWithoutTransactionInput[]
  createMany?: Prisma.TransactionToTagCreateManyTransactionInputEnvelope
  set?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  disconnect?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  delete?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  connect?: Prisma.TransactionToTagWhereUniqueInput | Prisma.TransactionToTagWhereUniqueInput[]
  update?: Prisma.TransactionToTagUpdateWithWhereUniqueWithoutTransactionInput | Prisma.TransactionToTagUpdateWithWhereUniqueWithoutTransactionInput[]
  updateMany?: Prisma.TransactionToTagUpdateManyWithWhereWithoutTransactionInput | Prisma.TransactionToTagUpdateManyWithWhereWithoutTransactionInput[]
  deleteMany?: Prisma.TransactionToTagScalarWhereInput | Prisma.TransactionToTagScalarWhereInput[]
}

export type TransactionToTagCreateWithoutTagInput = {
  transaction: Prisma.TransactionCreateNestedOneWithoutTagsInput
}

export type TransactionToTagUncheckedCreateWithoutTagInput = {
  transactionId: string
}

export type TransactionToTagCreateOrConnectWithoutTagInput = {
  where: Prisma.TransactionToTagWhereUniqueInput
  create: Prisma.XOR<Prisma.TransactionToTagCreateWithoutTagInput, Prisma.TransactionToTagUncheckedCreateWithoutTagInput>
}

export type TransactionToTagCreateManyTagInputEnvelope = {
  data: Prisma.TransactionToTagCreateManyTagInput | Prisma.TransactionToTagCreateManyTagInput[]
}

export type TransactionToTagUpsertWithWhereUniqueWithoutTagInput = {
  where: Prisma.TransactionToTagWhereUniqueInput
  update: Prisma.XOR<Prisma.TransactionToTagUpdateWithoutTagInput, Prisma.TransactionToTagUncheckedUpdateWithoutTagInput>
  create: Prisma.XOR<Prisma.TransactionToTagCreateWithoutTagInput, Prisma.TransactionToTagUncheckedCreateWithoutTagInput>
}

export type TransactionToTagUpdateWithWhereUniqueWithoutTagInput = {
  where: Prisma.TransactionToTagWhereUniqueInput
  data: Prisma.XOR<Prisma.TransactionToTagUpdateWithoutTagInput, Prisma.TransactionToTagUncheckedUpdateWithoutTagInput>
}

export type TransactionToTagUpdateManyWithWhereWithoutTagInput = {
  where: Prisma.TransactionToTagScalarWhereInput
  data: Prisma.XOR<Prisma.TransactionToTagUpdateManyMutationInput, Prisma.TransactionToTagUncheckedUpdateManyWithoutTagInput>
}

export type TransactionToTagScalarWhereInput = {
  AND?: Prisma.TransactionToTagScalarWhereInput | Prisma.TransactionToTagScalarWhereInput[]
  OR?: Prisma.TransactionToTagScalarWhereInput[]
  NOT?: Prisma.TransactionToTagScalarWhereInput | Prisma.TransactionToTagScalarWhereInput[]
  transactionId?: Prisma.StringFilter<"TransactionToTag"> | string
  tagId?: Prisma.StringFilter<"TransactionToTag"> | string
}

export type TransactionToTagCreateWithoutTransactionInput = {
  tag: Prisma.TagCreateNestedOneWithoutTransactionsInput
}

export type TransactionToTagUncheckedCreateWithoutTransactionInput = {
  tagId: string
}

export type TransactionToTagCreateOrConnectWithoutTransactionInput = {
  where: Prisma.TransactionToTagWhereUniqueInput
  create: Prisma.XOR<Prisma.TransactionToTagCreateWithoutTransactionInput, Prisma.TransactionToTagUncheckedCreateWithoutTransactionInput>
}

export type TransactionToTagCreateManyTransactionInputEnvelope = {
  data: Prisma.TransactionToTagCreateManyTransactionInput | Prisma.TransactionToTagCreateManyTransactionInput[]
}

export type TransactionToTagUpsertWithWhereUniqueWithoutTransactionInput = {
  where: Prisma.TransactionToTagWhereUniqueInput
  update: Prisma.XOR<Prisma.TransactionToTagUpdateWithoutTransactionInput, Prisma.TransactionToTagUncheckedUpdateWithoutTransactionInput>
  create: Prisma.XOR<Prisma.TransactionToTagCreateWithoutTransactionInput, Prisma.TransactionToTagUncheckedCreateWithoutTransactionInput>
}

export type TransactionToTagUpdateWithWhereUniqueWithoutTransactionInput = {
  where: Prisma.TransactionToTagWhereUniqueInput
  data: Prisma.XOR<Prisma.TransactionToTagUpdateWithoutTransactionInput, Prisma.TransactionToTagUncheckedUpdateWithoutTransactionInput>
}

export type TransactionToTagUpdateManyWithWhereWithoutTransactionInput = {
  where: Prisma.TransactionToTagScalarWhereInput
  data: Prisma.XOR<Prisma.TransactionToTagUpdateManyMutationInput, Prisma.TransactionToTagUncheckedUpdateManyWithoutTransactionInput>
}

export type TransactionToTagCreateManyTagInput = {
  transactionId: string
}

export type TransactionToTagUpdateWithoutTagInput = {
  transaction?: Prisma.TransactionUpdateOneRequiredWithoutTagsNestedInput
}

export type TransactionToTagUncheckedUpdateWithoutTagInput = {
  transactionId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TransactionToTagUncheckedUpdateManyWithoutTagInput = {
  transactionId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TransactionToTagCreateManyTransactionInput = {
  tagId: string
}

export type TransactionToTagUpdateWithoutTransactionInput = {
  tag?: Prisma.TagUpdateOneRequiredWithoutTransactionsNestedInput
}

export type TransactionToTagUncheckedUpdateWithoutTransactionInput = {
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TransactionToTagUncheckedUpdateManyWithoutTransactionInput = {
  tagId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type TransactionToTagSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  transactionId?: boolean
  tagId?: boolean
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transactionToTag"]>

export type TransactionToTagSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  transactionId?: boolean
  tagId?: boolean
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transactionToTag"]>

export type TransactionToTagSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  transactionId?: boolean
  tagId?: boolean
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}, ExtArgs["result"]["transactionToTag"]>

export type TransactionToTagSelectScalar = {
  transactionId?: boolean
  tagId?: boolean
}

export type TransactionToTagOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"transactionId" | "tagId", ExtArgs["result"]["transactionToTag"]>
export type TransactionToTagInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}
export type TransactionToTagIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}
export type TransactionToTagIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  transaction?: boolean | Prisma.TransactionDefaultArgs<ExtArgs>
  tag?: boolean | Prisma.TagDefaultArgs<ExtArgs>
}

export type $TransactionToTagPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TransactionToTag"
  objects: {
    transaction: Prisma.$TransactionPayload<ExtArgs>
    tag: Prisma.$TagPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    transactionId: string
    tagId: string
  }, ExtArgs["result"]["transactionToTag"]>
  composites: {}
}

export type TransactionToTagGetPayload<S extends boolean | null | undefined | TransactionToTagDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TransactionToTagPayload, S>

export type TransactionToTagCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TransactionToTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TransactionToTagCountAggregateInputType | true
  }

export interface TransactionToTagDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransactionToTag'], meta: { name: 'TransactionToTag' } }
  /**
   * Find zero or one TransactionToTag that matches the filter.
   * @param {TransactionToTagFindUniqueArgs} args - Arguments to find a TransactionToTag
   * @example
   * // Get one TransactionToTag
   * const transactionToTag = await prisma.transactionToTag.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TransactionToTagFindUniqueArgs>(args: Prisma.SelectSubset<T, TransactionToTagFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TransactionToTagClient<runtime.Types.Result.GetResult<Prisma.$TransactionToTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TransactionToTag that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TransactionToTagFindUniqueOrThrowArgs} args - Arguments to find a TransactionToTag
   * @example
   * // Get one TransactionToTag
   * const transactionToTag = await prisma.transactionToTag.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TransactionToTagFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TransactionToTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransactionToTagClient<runtime.Types.Result.GetResult<Prisma.$TransactionToTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TransactionToTag that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionToTagFindFirstArgs} args - Arguments to find a TransactionToTag
   * @example
   * // Get one TransactionToTag
   * const transactionToTag = await prisma.transactionToTag.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TransactionToTagFindFirstArgs>(args?: Prisma.SelectSubset<T, TransactionToTagFindFirstArgs<ExtArgs>>): Prisma.Prisma__TransactionToTagClient<runtime.Types.Result.GetResult<Prisma.$TransactionToTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TransactionToTag that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionToTagFindFirstOrThrowArgs} args - Arguments to find a TransactionToTag
   * @example
   * // Get one TransactionToTag
   * const transactionToTag = await prisma.transactionToTag.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TransactionToTagFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TransactionToTagFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TransactionToTagClient<runtime.Types.Result.GetResult<Prisma.$TransactionToTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TransactionToTags that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionToTagFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TransactionToTags
   * const transactionToTags = await prisma.transactionToTag.findMany()
   * 
   * // Get first 10 TransactionToTags
   * const transactionToTags = await prisma.transactionToTag.findMany({ take: 10 })
   * 
   * // Only select the `transactionId`
   * const transactionToTagWithTransactionIdOnly = await prisma.transactionToTag.findMany({ select: { transactionId: true } })
   * 
   */
  findMany<T extends TransactionToTagFindManyArgs>(args?: Prisma.SelectSubset<T, TransactionToTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionToTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TransactionToTag.
   * @param {TransactionToTagCreateArgs} args - Arguments to create a TransactionToTag.
   * @example
   * // Create one TransactionToTag
   * const TransactionToTag = await prisma.transactionToTag.create({
   *   data: {
   *     // ... data to create a TransactionToTag
   *   }
   * })
   * 
   */
  create<T extends TransactionToTagCreateArgs>(args: Prisma.SelectSubset<T, TransactionToTagCreateArgs<ExtArgs>>): Prisma.Prisma__TransactionToTagClient<runtime.Types.Result.GetResult<Prisma.$TransactionToTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TransactionToTags.
   * @param {TransactionToTagCreateManyArgs} args - Arguments to create many TransactionToTags.
   * @example
   * // Create many TransactionToTags
   * const transactionToTag = await prisma.transactionToTag.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TransactionToTagCreateManyArgs>(args?: Prisma.SelectSubset<T, TransactionToTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TransactionToTags and returns the data saved in the database.
   * @param {TransactionToTagCreateManyAndReturnArgs} args - Arguments to create many TransactionToTags.
   * @example
   * // Create many TransactionToTags
   * const transactionToTag = await prisma.transactionToTag.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TransactionToTags and only return the `transactionId`
   * const transactionToTagWithTransactionIdOnly = await prisma.transactionToTag.createManyAndReturn({
   *   select: { transactionId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TransactionToTagCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TransactionToTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionToTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TransactionToTag.
   * @param {TransactionToTagDeleteArgs} args - Arguments to delete one TransactionToTag.
   * @example
   * // Delete one TransactionToTag
   * const TransactionToTag = await prisma.transactionToTag.delete({
   *   where: {
   *     // ... filter to delete one TransactionToTag
   *   }
   * })
   * 
   */
  delete<T extends TransactionToTagDeleteArgs>(args: Prisma.SelectSubset<T, TransactionToTagDeleteArgs<ExtArgs>>): Prisma.Prisma__TransactionToTagClient<runtime.Types.Result.GetResult<Prisma.$TransactionToTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TransactionToTag.
   * @param {TransactionToTagUpdateArgs} args - Arguments to update one TransactionToTag.
   * @example
   * // Update one TransactionToTag
   * const transactionToTag = await prisma.transactionToTag.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TransactionToTagUpdateArgs>(args: Prisma.SelectSubset<T, TransactionToTagUpdateArgs<ExtArgs>>): Prisma.Prisma__TransactionToTagClient<runtime.Types.Result.GetResult<Prisma.$TransactionToTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TransactionToTags.
   * @param {TransactionToTagDeleteManyArgs} args - Arguments to filter TransactionToTags to delete.
   * @example
   * // Delete a few TransactionToTags
   * const { count } = await prisma.transactionToTag.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TransactionToTagDeleteManyArgs>(args?: Prisma.SelectSubset<T, TransactionToTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TransactionToTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionToTagUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TransactionToTags
   * const transactionToTag = await prisma.transactionToTag.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TransactionToTagUpdateManyArgs>(args: Prisma.SelectSubset<T, TransactionToTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TransactionToTags and returns the data updated in the database.
   * @param {TransactionToTagUpdateManyAndReturnArgs} args - Arguments to update many TransactionToTags.
   * @example
   * // Update many TransactionToTags
   * const transactionToTag = await prisma.transactionToTag.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TransactionToTags and only return the `transactionId`
   * const transactionToTagWithTransactionIdOnly = await prisma.transactionToTag.updateManyAndReturn({
   *   select: { transactionId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TransactionToTagUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TransactionToTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TransactionToTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TransactionToTag.
   * @param {TransactionToTagUpsertArgs} args - Arguments to update or create a TransactionToTag.
   * @example
   * // Update or create a TransactionToTag
   * const transactionToTag = await prisma.transactionToTag.upsert({
   *   create: {
   *     // ... data to create a TransactionToTag
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TransactionToTag we want to update
   *   }
   * })
   */
  upsert<T extends TransactionToTagUpsertArgs>(args: Prisma.SelectSubset<T, TransactionToTagUpsertArgs<ExtArgs>>): Prisma.Prisma__TransactionToTagClient<runtime.Types.Result.GetResult<Prisma.$TransactionToTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TransactionToTags.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionToTagCountArgs} args - Arguments to filter TransactionToTags to count.
   * @example
   * // Count the number of TransactionToTags
   * const count = await prisma.transactionToTag.count({
   *   where: {
   *     // ... the filter for the TransactionToTags we want to count
   *   }
   * })
  **/
  count<T extends TransactionToTagCountArgs>(
    args?: Prisma.Subset<T, TransactionToTagCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TransactionToTagCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TransactionToTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionToTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TransactionToTagAggregateArgs>(args: Prisma.Subset<T, TransactionToTagAggregateArgs>): Prisma.PrismaPromise<GetTransactionToTagAggregateType<T>>

  /**
   * Group by TransactionToTag.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TransactionToTagGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TransactionToTagGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TransactionToTagGroupByArgs['orderBy'] }
      : { orderBy?: TransactionToTagGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TransactionToTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionToTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TransactionToTag model
 */
readonly fields: TransactionToTagFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TransactionToTag.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TransactionToTagClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  transaction<T extends Prisma.TransactionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TransactionDefaultArgs<ExtArgs>>): Prisma.Prisma__TransactionClient<runtime.Types.Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  tag<T extends Prisma.TagDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TagDefaultArgs<ExtArgs>>): Prisma.Prisma__TagClient<runtime.Types.Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TransactionToTag model
 */
export interface TransactionToTagFieldRefs {
  readonly transactionId: Prisma.FieldRef<"TransactionToTag", 'String'>
  readonly tagId: Prisma.FieldRef<"TransactionToTag", 'String'>
}
    

// Custom InputTypes
/**
 * TransactionToTag findUnique
 */
export type TransactionToTagFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionToTag
   */
  select?: Prisma.TransactionToTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionToTag
   */
  omit?: Prisma.TransactionToTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionToTagInclude<ExtArgs> | null
  /**
   * Filter, which TransactionToTag to fetch.
   */
  where: Prisma.TransactionToTagWhereUniqueInput
}

/**
 * TransactionToTag findUniqueOrThrow
 */
export type TransactionToTagFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionToTag
   */
  select?: Prisma.TransactionToTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionToTag
   */
  omit?: Prisma.TransactionToTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionToTagInclude<ExtArgs> | null
  /**
   * Filter, which TransactionToTag to fetch.
   */
  where: Prisma.TransactionToTagWhereUniqueInput
}

/**
 * TransactionToTag findFirst
 */
export type TransactionToTagFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionToTag
   */
  select?: Prisma.TransactionToTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionToTag
   */
  omit?: Prisma.TransactionToTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionToTagInclude<ExtArgs> | null
  /**
   * Filter, which TransactionToTag to fetch.
   */
  where?: Prisma.TransactionToTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransactionToTags to fetch.
   */
  orderBy?: Prisma.TransactionToTagOrderByWithRelationInput | Prisma.TransactionToTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TransactionToTags.
   */
  cursor?: Prisma.TransactionToTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransactionToTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransactionToTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TransactionToTags.
   */
  distinct?: Prisma.TransactionToTagScalarFieldEnum | Prisma.TransactionToTagScalarFieldEnum[]
}

/**
 * TransactionToTag findFirstOrThrow
 */
export type TransactionToTagFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionToTag
   */
  select?: Prisma.TransactionToTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionToTag
   */
  omit?: Prisma.TransactionToTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionToTagInclude<ExtArgs> | null
  /**
   * Filter, which TransactionToTag to fetch.
   */
  where?: Prisma.TransactionToTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransactionToTags to fetch.
   */
  orderBy?: Prisma.TransactionToTagOrderByWithRelationInput | Prisma.TransactionToTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TransactionToTags.
   */
  cursor?: Prisma.TransactionToTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransactionToTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransactionToTags.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TransactionToTags.
   */
  distinct?: Prisma.TransactionToTagScalarFieldEnum | Prisma.TransactionToTagScalarFieldEnum[]
}

/**
 * TransactionToTag findMany
 */
export type TransactionToTagFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionToTag
   */
  select?: Prisma.TransactionToTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionToTag
   */
  omit?: Prisma.TransactionToTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionToTagInclude<ExtArgs> | null
  /**
   * Filter, which TransactionToTags to fetch.
   */
  where?: Prisma.TransactionToTagWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TransactionToTags to fetch.
   */
  orderBy?: Prisma.TransactionToTagOrderByWithRelationInput | Prisma.TransactionToTagOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TransactionToTags.
   */
  cursor?: Prisma.TransactionToTagWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TransactionToTags from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TransactionToTags.
   */
  skip?: number
  distinct?: Prisma.TransactionToTagScalarFieldEnum | Prisma.TransactionToTagScalarFieldEnum[]
}

/**
 * TransactionToTag create
 */
export type TransactionToTagCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionToTag
   */
  select?: Prisma.TransactionToTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionToTag
   */
  omit?: Prisma.TransactionToTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionToTagInclude<ExtArgs> | null
  /**
   * The data needed to create a TransactionToTag.
   */
  data: Prisma.XOR<Prisma.TransactionToTagCreateInput, Prisma.TransactionToTagUncheckedCreateInput>
}

/**
 * TransactionToTag createMany
 */
export type TransactionToTagCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TransactionToTags.
   */
  data: Prisma.TransactionToTagCreateManyInput | Prisma.TransactionToTagCreateManyInput[]
}

/**
 * TransactionToTag createManyAndReturn
 */
export type TransactionToTagCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionToTag
   */
  select?: Prisma.TransactionToTagSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionToTag
   */
  omit?: Prisma.TransactionToTagOmit<ExtArgs> | null
  /**
   * The data used to create many TransactionToTags.
   */
  data: Prisma.TransactionToTagCreateManyInput | Prisma.TransactionToTagCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionToTagIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TransactionToTag update
 */
export type TransactionToTagUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionToTag
   */
  select?: Prisma.TransactionToTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionToTag
   */
  omit?: Prisma.TransactionToTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionToTagInclude<ExtArgs> | null
  /**
   * The data needed to update a TransactionToTag.
   */
  data: Prisma.XOR<Prisma.TransactionToTagUpdateInput, Prisma.TransactionToTagUncheckedUpdateInput>
  /**
   * Choose, which TransactionToTag to update.
   */
  where: Prisma.TransactionToTagWhereUniqueInput
}

/**
 * TransactionToTag updateMany
 */
export type TransactionToTagUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TransactionToTags.
   */
  data: Prisma.XOR<Prisma.TransactionToTagUpdateManyMutationInput, Prisma.TransactionToTagUncheckedUpdateManyInput>
  /**
   * Filter which TransactionToTags to update
   */
  where?: Prisma.TransactionToTagWhereInput
  /**
   * Limit how many TransactionToTags to update.
   */
  limit?: number
}

/**
 * TransactionToTag updateManyAndReturn
 */
export type TransactionToTagUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionToTag
   */
  select?: Prisma.TransactionToTagSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionToTag
   */
  omit?: Prisma.TransactionToTagOmit<ExtArgs> | null
  /**
   * The data used to update TransactionToTags.
   */
  data: Prisma.XOR<Prisma.TransactionToTagUpdateManyMutationInput, Prisma.TransactionToTagUncheckedUpdateManyInput>
  /**
   * Filter which TransactionToTags to update
   */
  where?: Prisma.TransactionToTagWhereInput
  /**
   * Limit how many TransactionToTags to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionToTagIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TransactionToTag upsert
 */
export type TransactionToTagUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionToTag
   */
  select?: Prisma.TransactionToTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionToTag
   */
  omit?: Prisma.TransactionToTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionToTagInclude<ExtArgs> | null
  /**
   * The filter to search for the TransactionToTag to update in case it exists.
   */
  where: Prisma.TransactionToTagWhereUniqueInput
  /**
   * In case the TransactionToTag found by the `where` argument doesn't exist, create a new TransactionToTag with this data.
   */
  create: Prisma.XOR<Prisma.TransactionToTagCreateInput, Prisma.TransactionToTagUncheckedCreateInput>
  /**
   * In case the TransactionToTag was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TransactionToTagUpdateInput, Prisma.TransactionToTagUncheckedUpdateInput>
}

/**
 * TransactionToTag delete
 */
export type TransactionToTagDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionToTag
   */
  select?: Prisma.TransactionToTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionToTag
   */
  omit?: Prisma.TransactionToTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionToTagInclude<ExtArgs> | null
  /**
   * Filter which TransactionToTag to delete.
   */
  where: Prisma.TransactionToTagWhereUniqueInput
}

/**
 * TransactionToTag deleteMany
 */
export type TransactionToTagDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TransactionToTags to delete
   */
  where?: Prisma.TransactionToTagWhereInput
  /**
   * Limit how many TransactionToTags to delete.
   */
  limit?: number
}

/**
 * TransactionToTag without action
 */
export type TransactionToTagDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TransactionToTag
   */
  select?: Prisma.TransactionToTagSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TransactionToTag
   */
  omit?: Prisma.TransactionToTagOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TransactionToTagInclude<ExtArgs> | null
}
